version: 2.1 # use CircleCI 2.0

workflows:
  version: 2
  "Build, Test & Run":
    jobs:
      - build
#      - test
      - deploy_dev:
          requires:
            - build
          context: aws-credentials
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/Jackil-Rajnicant/Calculator    # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed

          key: Calculator-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: Calculator-{{ checksum "pom.xml" }}

      - run: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.

          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact

          path: target/Calculator-1.0-SNAPSHOT.jar

  deploy_dev:
      docker:
        - image: circleci/node:10.15

      working_directory: ~/circleci/Jackil-Rajnicant/Calculator

      steps:
        - checkout

        - restore_cache:
            keys:
              - Calculator-{{ checksum "pom.xml" }}

        - deploy:
            command: npx serverless deploy --stage dev

#  test:
#    working_directory: ~/Jackil-Rajnicant/Calculator    # directory where steps will run
#
#    docker: # run the steps with Docker
#      - image: circleci/openjdk:8-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
#
#    steps:
#      - run: mvn test # run the actual tests

